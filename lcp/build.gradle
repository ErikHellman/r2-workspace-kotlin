apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                version "3.7.1"
                cppFlags "-std=c++11 -frtti -fexceptions"
                abiFilters 'x86'
            }
        }
    }

    buildTypes {
        release {
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=RELEASE",
                            "-DANDROID_STL=c++_shared"
                }
            }
        }

        debug {
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=DEBUG",
                            "-DANDROID_STL=c++_shared"
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

task dist {
    doFirst {
        println("Clean dist directory")
        def dstDirPath = "${project.projectDir}/../dist/"
        delete dstDirPath
    }

    doLast {
        println("Copy shared library to libs")


        android.buildTypes.all { buildType ->
            def dstDirPath = "${project.projectDir}/../dist/${buildType.name}"
            android.defaultConfig.externalNativeBuild.cmake.abiFilters.each { abiFilter ->
                // Copy shared lib
                println("Copy share lib: ${buildType.name}/${abiFilter}")
                def srcDirPath = "${project.projectDir}/build/intermediates/cmake/${buildType.name}/obj/${abiFilter}"

                copy {
                    from("${srcDirPath}") {
                        include("liblcp.so")
                    }
                    into("${dstDirPath}/${abiFilter}")
                }
            }

            // Copy aar
            println("Copy aar lib: ${buildType.name}")
            def srcDirPath = "${project.projectDir}/build/outputs/aar"
            def srcFilename = "lcp-${buildType.name}.aar"

            copy {
                from("${srcDirPath}") {
                    include(srcFilename)
                }
                into("${dstDirPath}")
                rename(srcFilename, "liblcp.aar")
            }
        }
    }
}

